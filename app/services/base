# def encontrar_par(lista: List[Punto]) -> Tuple[self._tupla_puntos_type, List[Punto], float]:
        #     pares_cercanos: Tuple[self._tupla_puntos_type, List[Punto], float] = Punto.pares_cercanos(lista)
        #     if pares_cercanos[0][0].get_index() == pares_cercanos[0][1].get_index():
        #         raise Exception('Mismo punto')

        #     #print(pares_cercanos[0][0].get_tamano(),pares_cercanos[0][1].get_tamano(), self._tamano_maximo)
        #     #print(pares_cercanos[0][0].get(), pares_cercanos[0][1].get())

        #     if pares_cercanos[0][0].get_tamano() + pares_cercanos[0][1].get_tamano() > self._tamano_maximo:
        #         if(len(pares_cercanos[1]) > 0):

        #             R: bool = False
        #             L: bool = False

        #             if pares_cercanos[0][0].get_tamano() < self._tamano_maximo:
        #                 L = True
        #                 lista_L = pares_cercanos[1][:]
        #                 lista_L.append(pares_cercanos[0][0])
        #                 try:
        #                     pares_cercanos_L = encontrar_par(lista_L)
        #                 except Exception as e:
        #                     print(e)
        #                     L = False

        #             if pares_cercanos[0][1].get_tamano() < self._tamano_maximo:
        #                 R = True
        #                 lista_R = pares_cercanos[1][:]
        #                 lista_R.append(pares_cercanos[0][1])
        #                 try:
        #                     pares_cercanos_R = encontrar_par(lista_R)
        #                 except Exception as e:
        #                     print(e)
        #                     R = False

        #             if(L and R):
        #                 return min(pares_cercanos_L,pares_cercanos_R, key=lambda x: x[2])
        #             elif L:
        #                 return pares_cercanos_L
        #             elif R:
        #                 return pares_cercanos_R
        #             else:
        #                 raise Exception('Ninguno cumple')
        #         else:
        #             raise Exception('Ninguno cumple, busque punto medio')
        #     else:
        #         return pares_cercanos